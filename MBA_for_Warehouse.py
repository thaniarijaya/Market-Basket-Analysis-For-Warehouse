# -*- coding: utf-8 -*-
"""datmintrial1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pxgZ0HTh40ktcFNL8_-u9ZJr8OfxNUc1
"""

import numpy as np
import pandas as pd
import ast

alldata = pd.read_csv("dirty_data.csv")
alldata

#mengambil kolom shopping cart saja dan mengconvertnya jadi bentuk literal supaya bisa diproses sebagai tuple
sc_tuple = alldata['shopping_cart'].apply(ast.literal_eval)
sc_tuple

#mengkonversikan tuple jadi bentuk list
cart = []
for i in sc_tuple:
  #yang diambil hanya index 0 dari tiap produk saja karena kita tdk butuh tau jumlah produk yang dipesan
  cart.append([j[0].capitalize() for j in i]) #capitalize --> utk menyamakan format penulisan nama produk
cart

print(len(cart))

from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

te = TransactionEncoder()
te_ary = te.fit(cart).transform(cart)
df = pd.DataFrame(te_ary, columns=te.columns_)
df

frequent_itemsets = apriori(df, min_support=0.08, use_colnames=True)
frequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))
frequent_itemsets

rules = association_rules(frequent_itemsets, metric ="confidence", min_threshold = 0.28)
rules[['antecedents', 'consequents', 'antecedent support' , 'consequent support', 'support', 'confidence']]

#memasukkan data pattern itemsets(pair) & nearest warehouse ke array
pairs = []
nw = list(alldata['nearest_warehouse'])
for i in frequent_itemsets[(frequent_itemsets['length'] >= 2) ]['itemsets']:
  pairs.append(list(i))
pairs

#MAPPING KE GUDANG --> mencari tahu nearest warehouse dari mayoritas customer yg membeli pattern tersebut
warehouse = []
for i in range(len(cart)):
  for prod in pairs:
    productA = str(prod[0])
    productB = str(prod[1])

    #mengecek apakah pattern tersebut ada di shopping cart yg sedang kita cek
    if productA in cart[i] and productB in cart[i]:
      row = []
      row.append(str(prod))
      row.append(str(cart[i])) 
      row.append(str(nw[i])) #mencari tahu nearest warehouse dari user tsb
      warehouse.append(row)

warehouse = np.array(warehouse)
warehouse

table = pd.DataFrame(data=warehouse, columns=['Itemset', 'Shopping Cart', 'Nearest Warehouse'])
table.sort_values(["Itemset", "Nearest Warehouse"])

bakers = []
nickolson = []
thompson = []
for i in range(len(pairs)):
  count1 = 0 #Bakers
  count2 = 0 #Nickolson
  count3 = 0 #Thomson
  stringP = str(pairs[i]) #menyamakan tipe data
  for j in range(len(table)):
    stringT = str(table["Itemset"][j])
    if (stringT == stringP) and (table["Nearest Warehouse"][j] == "Bakers"):
      count1 = count1 + 1
    elif (stringT == stringP) and (table["Nearest Warehouse"][j] == "Nickolson"):
      count2 = count2 + 1
    elif (stringT == stringP) and (table["Nearest Warehouse"][j] == "Thompson"):
      count3 = count3 + 1
  if count1 > count2 and count1 > count3:
    bakers.append(stringP)
  elif count2 > count3 and count2 > count1:
    nickolson.append(stringP)
  elif count3 > count1 and count3 > count2:
    thompson.append(stringP)

bakers

nickolson

thompson